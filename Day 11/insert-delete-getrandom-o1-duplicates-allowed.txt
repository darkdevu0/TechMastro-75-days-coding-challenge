class RandomizedCollection {
public:
    vector<int> arr;
    unordered_map<int, unordered_set<int>> map;
    
    RandomizedCollection() {
        
    }
    
    bool insert(int val) {
        bool flag = false;
        if(!map.count(val)) flag = true;
        map[val].insert(arr.size());
        arr.push_back(val);
        return flag;
    }
    
    bool remove(int val) {
        if(!map.count(val)) return false;
        if(arr.back() == val) {
            map[val].erase(arr.size() - 1);
            if(map[val].empty()) map.erase(val);
            arr.pop_back();
            return true;
        }
        int fi = *map[val].begin();
        int si = arr.size() - 1;
        map[arr.back()].erase(si);
        map[val].erase(fi);
        if(map[val].empty()) map.erase(val);
        map[arr.back()].insert(fi);
        swap(arr[fi], arr[si]);
        arr.pop_back();
        return true;
    }
    
    int getRandom() {   
        return arr[rand() % arr.size()];
    }
};

/**
 * Your RandomizedCollection object will be instantiated and called as such:
 * RandomizedCollection* obj = new RandomizedCollection();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */