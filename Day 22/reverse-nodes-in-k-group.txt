/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode *util(ListNode *head, int k) {
        if(!head) return head;
        ListNode *curr = head, *prev = nullptr, *next = nullptr;
        int index = 0;
        while(index < k and curr) {
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
            ++index;
        }
        if(index != k) {
            curr = prev;
            prev = nullptr;
            next = nullptr;
            while(curr) {
                next = curr->next;
                curr->next = prev;
                prev = curr;
                curr = next;
            }
            return head;
        } else {
            head->next = util(next, k);
            return prev;
        }
    }
    
    ListNode* reverseKGroup(ListNode* head, int k) {
        return util(head, k);
    }
};