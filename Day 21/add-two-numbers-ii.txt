/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode *reverse(ListNode *head) {
        ListNode *prev = nullptr, *next = nullptr;
        while(head) {
            next = head->next;
            head->next = prev;
            prev = head;
            head = next;
        }
        return prev;
    }
    
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        l1 = reverse(l1), l2 = reverse(l2);
        ListNode *dummy = new ListNode(0), *p = dummy;
        int carry = 0, sum = 0;
        while(l1 or l2 or carry) {
            if(l1 and l2) {
                sum = l1->val + l2->val + carry;
                carry = 0;
                if(sum >= 10) carry = 1, sum -= 10;
                l1 = l1->next;
                l2 = l2->next;
            } else {
                if(l1) {
                    sum = l1->val + carry;
                    carry = 0;
                    if(sum >= 10) carry = 1, sum -= 10;
                    l1 = l1->next;
                } else if(l2) {
                    sum = l2->val + carry;
                    carry = 0;
                    if(sum >= 10) carry = 1, sum -= 10;
                    l2 = l2->next;
                } else {
                    p->next = new ListNode(1);
                    carry = 0;
                    break;
                }
            }
            p->next = new ListNode(sum);
            p = p->next;
        }
        return reverse(dummy->next);
    }
};