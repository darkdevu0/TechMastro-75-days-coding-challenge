class Solution {
public:
    void merge(vector<int>& nums, int low, int mid, int high, unordered_map<int,int>& cnt){
        int i = low, j = mid+1, k = 0;
        
        vector<int> arr(nums.size());
        
        while(i<=mid && j<=high){
            if(nums[i] <= nums[j]){
                arr[k++] = nums[i++];
            }else{
                arr[k++] = nums[j++];
                int p = i;
                while(p <= mid)
                    cnt[nums[p++]]++;
            }
        }
        
        while(i <= mid){
            arr[k++] = nums[i++];
        }
        
        while(j <= high){
            arr[k++] = nums[j++];
        }
        
        for(int i = low, j = 0; i <= high; i++,j++)
            nums[i] = arr[j];
    }
    void util(vector<int>& nums, int low, int high, unordered_map<int,int>& cnt){
        if(low >= high) return;
        
        int mid = low+(high-low)/2;
        util(nums, low, mid, cnt);
        util(nums, mid+1, high, cnt);
        merge(nums,low,mid,high,cnt);
    }
    vector<int> countSmaller(vector<int>& nums) {
        vector<int> temp = nums;
        unordered_map<int,int> cnt;
        vector<int> ans;
        util(nums,0,nums.size()-1,cnt);
        for(auto i : temp)
            ans.push_back(cnt[i]);
        return ans;
    }
};